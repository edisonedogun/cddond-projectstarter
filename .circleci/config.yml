version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments ${CIRCLE_WORKFLOW_ID:0:7} 
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>> 
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>      
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/8GLdeGVAoZBnLeUvqZQJgN/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS == 1 )); 
            then
              cd backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-build]
      - run: 
          name: Test Front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Analyse Front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: analyze Back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}         

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: 
            - "83:17:69:b9:43:5b:ac:43:0a:49:e0:dd:31:ef:fe:b3"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Install dependencies needed for your playbook
            apk add --update ansible
            pip install awscli
            aws --version
      - run: 
          name: View content of inventory.txt
          command: cat .circleci/ansible/inventory.txt 
      - run:
          name: Setup environment variables
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo NODE_ENV=production >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend.env
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cat backend/.env
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Setup environment variables
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo NODE_ENV=production >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend.env
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cat backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            sudo npm install -g tsc
            npm run migrations > migrations_dump.txt
      - run: 
          name: show migration dump
          command: |
            cd backend
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              sudo apt-get update && sudo apt-get install -y ca-certificates
              curl https://kvdb.io/8GLdeGVAoZBnLeUvqZQJgN/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install AWS CLI dependencies
  #         command: |
  #           sudo apt-get update && sudo apt-get install -yy less
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           sudo npm install -g npm
  #           # Run and save the migration output
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration results to kvdb.io
  #         command: |
  #           if grep -q "has been execugted successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             sudo apt-get update && sudo apt-get install -y ca-certificates
  #             curl https://kvdb.io/8GLdeGVAoZBnLeUvqZQJgN/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #           fi 
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y && yum install -y sudo
            sudo yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
            sudo yum install nodejs -y
            yum install tar -y
            yum install gzip -y
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
      - attach_workspace:
          at: ~/
      - run:
            name: add values to .env files
            command: |
              touch backend/.env
              echo ENVIRONMENT=production >> "backend/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
                    
  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys: 
  #           fingerprints: 
  #              - "83:17:69:b9:43:5b:ac:43:0a:49:e0:dd:31:ef:fe:b3"
  #     - attach_workspace:
  #         at: ~/
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           apk add curl gzip tar nodejs npm
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           ./aws/install -i /usr/local/aws -b /usr/local/bin/aws
  #           chmod  755 /usr/local/aws
  #           chmod  755 /usr/local/bin/aws
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #     - run:
  #         name: Package Backend
  #         command: |
  #           tar -C backend -czvf artifact.tar.gz .
  #           cp artifact.tar.gz  ~/
  #     - run:
  #         name: Checking the existence of inventory.txt && artifact.tar.gz file
  #         command: |
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           echo "Contents of files folder is -------"
  #           ls ~/
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      - add_ssh_keys: 
          fingerprints: ["83:17:69:b9:43:5b:ac:43:0a:49:e0:dd:31:ef:fe:b3"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: View content of inventory.txt
          command: cat .circleci/ansible/inventory.txt 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run:
          name: Checking the existence of inventory.txt && artifact.tar.gz file
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            echo "Contents of files folder is -------"
            ls ~/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli 
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text )
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030" 
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      # Here's where you will add some code to rollback on failure  
  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip curl
  #           curl -sL https://rpm.nodesource.com/setup_10.x | bash -
  #           yum install -y nodejs
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name InitialStack \
  #             --parameter-overrides WorkflowID2="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7 
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout     
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install tar gzip npm nodejs -y
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            # Chage the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
            echo OldWorkflowID=${OldWorkflowID}
            echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7 
  prometheus-node-exporter:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["83:17:69:b9:43:5b:ac:43:0a:49:e0:dd:31:ef:fe:b3"]  
      - run:
          name: Install dependencies
          command: |
            apk add --update aws-cli tar gzip ansible nodejs npm
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Prometheus Node Exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt node-exporter.yml 
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
  cleanup:
        docker:
          # Docker image here
          - image: amazon/aws-cli
        steps:
          # Checkout code from git
          - checkout
          # - run:
          #     name: Get olld stack workflow id
          #     command: |
          #       # your code here
          #       # Fetch the Old workflow ID
          #       export OldWorkflowID=$(aws cloudformation list-exports \
          #       --query "Exports[?Name==\`WorkflowID\`].Value" \
          #       --no-paginate --output text)
          #       echo $OldWorkflowID >> ~/OldWorkflowID.txt
          #       cat ~/OldWorkflowID.txt
          #       export OldWorkflowID=$(cat ~/OldWorkflowID.txt) #export the OldWorkflowID to save it to the environment.
          #       echo OldWorkflowID: "${OldWorkflowID}"
          #       echo OldWorkflowID
          #       echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
          #       # Fetch the stack names from env          
          #       export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
          #               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
          #       echo Stack namess: "${STACKS[@]}" 
          - run:
              name: Remove old stacks and file
              command: |
                #your code here
                export OldWorkflowID=$(aws cloudformation list-exports \
                --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)

                export STACKS=($(aws cloudformation list-stacks \
                    --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                
                echo Old Workflow ID: $OldWorkflowID 
                echo Stack names: "${STACKS[@]}"

                if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                then
                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                fi
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update aws-cli tar gzip ansible nodejs npm
  #     - restore_cache:
  #         keys: [backend-build]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Setup Prometheus Node Exporter
  #         command: |
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt node-exporter.yml 
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
  # cleanup:
  #       docker:
  #         # Docker image here
  #         - image: amazon/aws-cli
  #       steps:
  #         # Checkout code from git
  #         - checkout
  #         - run:
  #             name: Get old stack workflow id
  #             command: |
  #               # your code here
  #               # Fetch the Olld workflow ID
  #               export OldWorkflowID=$(aws cloudformation list-exports \
  #               --query "Exports[?Name==\`WorkflowID\`].Value" \
  #               --no-paginate --output text)
  #               echo $OldWorkflowID >> ~/OldWorkflowID.txt
  #               cat ~/OldWorkflowID.txt
  #               export OldWorkflowID=$(cat ~/OldWorkflowID.txt) #export the OldWorkflowID to save it to the environment.
  #               echo OldWorkflowID: "${OldWorkflowID}"
  #               echo OldWorkflowID
  #               echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
  #               # Fetch the stack names          
  #               export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                       --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #               echo Stack names: "${STACKS[@]}" 
  #         - run:
  #             name: Remove old stacks and files
  #             command: |
  #               if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #               then
  #                 # your code here
  #                 echo $OldWorkflowID $STACKS ${CIRCLE_WORKFLOW_ID:0:7}
  #                 # aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #                 aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #                 aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #               else
  #                 echo ------------ Cannot cleanup stacks --------------  
  #               fi   


# workflows:
#   default:
#     jobs:
#       # - deploy-infrastructure
#       # - configure-infrastructure: 
#       #     requires: [deploy-infrastructure]
#       # - build-frontend
#       # - build-backend
#       # - test-frontend:
#       #     requires: [build-frontend]
#       # - test-backend:
#       #     requires: [build-backend]
#       # - scan-backend:
#       #     requires: [build-backend]
#       # - scan-frontend:
#       #     requires: [build-frontend]
#       - deploy-infrastructure:
#           # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [master]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       # - prometheus-node-exporter:
#       #     requires: [deploy-backend]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       # - cleanup:
#       #     requires: [cloudfront-update]